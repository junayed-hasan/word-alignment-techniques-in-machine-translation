import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000000000, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-i", "--num_iterations", dest="num_iterations", default=5, type="int", help="Number of iterations for training IBM Model 1")
(opts, _) = optparser.parse_args()

f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with Improved Bidirectional IBM Model 1...\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]

def train_ibm_model1(bitext, num_iterations):
    t = defaultdict(lambda: defaultdict(lambda: 1.0))
    
    for iteration in range(num_iterations):
        sys.stderr.write(f"Iteration {iteration + 1}...")
        count = defaultdict(lambda: defaultdict(float))
        total = defaultdict(float)
        for (f, e) in bitext:
            for f_word in f:
                Z = sum(t[f_word][e_word] for e_word in e)
                for e_word in e:
                    c = t[f_word][e_word] / Z
                    count[f_word][e_word] += c
                    total[e_word] += c
        for f_word in count:
            for e_word in count[f_word]:
                t[f_word][e_word] = count[f_word][e_word] / total[e_word]
        sys.stderr.write("done\n")
    return t

# Train French-to-English model
sys.stderr.write("Training French-to-English model...\n")
t_f_e = train_ibm_model1(bitext, opts.num_iterations)

# Train English-to-French model
sys.stderr.write("Training English-to-French model...\n")
t_e_f = train_ibm_model1([(e, f) for f, e in bitext], opts.num_iterations)

sys.stderr.write("Aligning...\n")

def grow_diag_final_and(e_aligned, f_aligned, f_len, e_len):
    union = e_aligned | f_aligned
    intersection = e_aligned & f_aligned
    alignment = intersection.copy()
    
    neighbors = [(-1,0), (0,-1), (1,0), (0,1), (-1,-1), (-1,1), (1,-1), (1,1)]
    
    def grow_diag():
        for e in range(e_len):
            for f in range(f_len):
                if (f, e) in intersection:
                    for nf, ne in neighbors:
                        new_f, new_e = f + nf, e + ne
                        if 0 <= new_f < f_len and 0 <= new_e < e_len:
                            if (new_f, new_e) not in alignment:
                                if new_f not in [f for f, _ in alignment] or new_e not in [e for _, e in alignment]:
                                    if (new_f, new_e) in union:
                                        alignment.add((new_f, new_e))
    
    def final_and(align, inverse=False):
        for f in range(f_len):
            for e in range(e_len):
                if (f, e) not in alignment:
                    if inverse:
                        if e not in [e for _, e in alignment] and (f, e) in align:
                            alignment.add((f, e))
                    else:
                        if f not in [f for f, _ in alignment] and (f, e) in align:
                            alignment.add((f, e))
    
    grow_diag()
    final_and(f_aligned)
    final_and(e_aligned, inverse=True)
    
    return alignment

def align_sentence(f, e):
    f_len, e_len = len(f), len(e)
    e_aligned = set((i, max(range(e_len), key=lambda j: t_f_e[f[i]][e[j]])) for i in range(f_len))
    f_aligned = set((max(range(f_len), key=lambda i: t_e_f[e[j]][f[i]]), j) for j in range(e_len))
    
    alignment = grow_diag_final_and(e_aligned, f_aligned, f_len, e_len)
    return " ".join(f"{f}-{e}" for f, e in sorted(alignment))

# Align and output
for (f, e) in bitext:
    alignment = align_sentence(f, e)
    sys.stdout.write(f"{alignment}\n")

sys.stderr.write("\n")